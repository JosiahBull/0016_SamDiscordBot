//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "list_item"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub list_id: i32,
    pub message_id: i64,
    pub user_id: i64,
    pub created_at: DateTime,
    pub bought: bool,
    pub item: String,
    pub quantity: i64,
    pub personal: bool,
    pub store: Option<String>,
    pub notes: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    ListId,
    MessageId,
    UserId,
    CreatedAt,
    Bought,
    Item,
    Quantity,
    Personal,
    Store,
    Notes,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    List,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::ListId => ColumnType::Integer.def(),
            Self::MessageId => ColumnType::BigInteger.def(),
            Self::UserId => ColumnType::BigInteger.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::Bought => ColumnType::Boolean.def(),
            Self::Item => ColumnType::String(None).def(),
            Self::Quantity => ColumnType::BigInteger.def(),
            Self::Personal => ColumnType::Boolean.def(),
            Self::Store => ColumnType::String(None).def().null(),
            Self::Notes => ColumnType::String(None).def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::List => Entity::belongs_to(super::list::Entity)
                .from(Column::ListId)
                .to(super::list::Column::Id)
                .into(),
        }
    }
}

impl Related<super::list::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::List.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
