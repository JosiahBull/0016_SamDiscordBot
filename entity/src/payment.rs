//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "payment"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub total_amount: i64,
    pub created_by: i64,
    pub created_at: DateTime,
    pub originating_message_id: i64,
    pub individual_users: Vec<i64>,
    pub individual_amounts: Vec<i64>,
    pub image_path: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    TotalAmount,
    CreatedBy,
    CreatedAt,
    OriginatingMessageId,
    IndividualUsers,
    IndividualAmounts,
    ImagePath,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::TotalAmount => ColumnType::BigInteger.def(),
            Self::CreatedBy => ColumnType::BigInteger.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::OriginatingMessageId => ColumnType::BigInteger.def(),
            Self::IndividualUsers => {
                ColumnType::Array(sea_orm::sea_query::SeaRc::new(ColumnType::BigInteger)).def()
            }
            Self::IndividualAmounts => {
                ColumnType::Array(sea_orm::sea_query::SeaRc::new(ColumnType::BigInteger)).def()
            }
            Self::ImagePath => ColumnType::String(None).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
